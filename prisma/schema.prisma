// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" //previewFeatures = ["referentaiIntegrity"]  client에 이거랑 똑같음.
}

model User {
  id              Int         @id @default(autoincrement()) //User에 id가 있고 정수형이며 id를 통해 식별하며 자동적으로 숫자가 증가하도록 설정
  phone           String?     @unique //Phone 은 Int 형이며 유니크 하다. 선택적으로 들어올 수 있음.(? 표시)
  email           String?     @unique
  name            String
  avatar          String?
  createAt        DateTime    @default(now())
  updateAt        DateTime    @updatedAt
  tokens          Token[]
  Product         Product[]
  Fav             Fav[]
  Post            Post[]
  Answer          Answer[]
  Wondering       Wondering[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  receivedReviews Review[]    @relation(name: "receivedReviews")
  sales           Sale[]
  purchases       Purchase[]
  Stream          Stream[]
  Message         Message[]
  writtenChats    ChatRooms[] @relation(name: "writtenChats")
  receivedChats   ChatRooms[] @relation(name: "receivedChats")
  Chats           Chats[]
}

model Token {
  id       Int      @id @default(autoincrement()) //User에 id가 있고 정수형이며 id를 통해 식별하며 자동적으로 숫자가 증가하도록 설정
  payload  String   @unique
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade) //부모 user을 삭제하면 따라서 같이 삭제하는 옵션
  userId   Int
}

model Product {
  id          Int        @id @default(autoincrement())
  createAt    DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  imageUrl    String
  name        String
  price       Int
  description String     @db.MediumText
  Fav         Fav[]
  sales       Sale[]
  purchases   Purchase[]
}

model Fav {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) //유저를 삭제하면 해당 Fav도 삭제됨.
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade) //product를 삭제하면 해당 Fav도 삭제됨.
  productId Int
}

model Post {
  id        Int         @id @default(autoincrement())
  createAt  DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  latitude  Float?
  longitude Float?
  answer    Answer[]
  wondering Wondering[]
}

model Answer {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  answer   String   @db.MediumText
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
}

model Wondering {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
}

model Review {
  id           Int      @id @default(autoincrement())
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt
  review       String   @db.MediumText
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade) //한 모델에서 중복으로 모델을 불러올 때 name을 따로 지정해야 함.
  createdById  Int
  userId       Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score        Int      @default(1)
}

model Sale {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) //유저를 삭제하면 해당 Fav도 삭제됨.
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade) //product를 삭제하면 해당 Fav도 삭제됨.
  productId Int
}

model Purchase {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) //유저를 삭제하면 해당 Fav도 삭제됨.
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade) //product를 삭제하면 해당 Fav도 삭제됨.
  productId Int
}

model Stream {
  id          Int       @id @default(autoincrement())
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  name        String
  description String
  price       Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  Message     Message[]
}

model Message {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  message  String   @db.MediumText
  stream   Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId Int
}

model ChatRooms {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  chatBy    User     @relation(name: "writtenChats", fields: [chatById], references: [id], onDelete: Cascade) //한 모델에서 중복으로 모델을 불러올 때 name을 따로 지정해야 함.
  chatById  Int
  chatFor   User     @relation(name: "receivedChats", fields: [chatForId], references: [id], onDelete: Cascade)
  chatForId Int
  chats     Chats[]
}

model Chats {
  id          Int       @id @default(autoincrement())
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  chats       String    @db.MediumText
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  chatRooms   ChatRooms @relation(fields: [chatRoomsId], references: [id], onDelete: Cascade)
  chatRoomsId Int
}
